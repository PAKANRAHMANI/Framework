##################################################################################################
trigger:
 - dotNet6
##################################################################################################
resources:
- repo: self
##################################################################################################
variables:
- name: BuildParameters.RestoreBuildProjects
  value: '**/*.csproj'
##################################################################################################
steps:
   - task: DotNetCoreCLI@2
     displayName: Restore
     inputs:
       command: restore
       projects: $(BuildParameters.RestoreBuildProjects)
       selectOrConfig: config
       nugetConfigPath: Code/NuGet.Config
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: Build
     inputs:
       projects: $(BuildParameters.RestoreBuildProjects)
       arguments: --configuration $(BuildConfiguration) --no-restore	
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Unit Test'
     inputs:
       command: test
       projects: '**/*.Tests.Unit.csproj'
       arguments: '--configuration $(BuildConfiguration)'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Integration Test'
     inputs:
       command: test
       projects: '**/*.Tests.Integration.csproj'
       arguments: '--configuration $(BuildConfiguration)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.DataAccess.Clickhouse/Framework.DataAccess.ClickHouse.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.DataAccess.Clickhouse'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.DataAccess.Clickhouse'
     inputs:
       command: custom
       projects: '**/Framework.DataAccess.ClickHouse.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Application/Framework.Application.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Application'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Application'
     inputs:
       command: custom
       projects: '**/Framework.Application.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Application.Contracts/Framework.Application.Contracts.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Application.Contracts'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Application.Contracts'
     inputs:
       command: custom
       projects: '**/Framework.Application.Contracts.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.AspNetCore/Framework.AspNetCore.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.AspNetCore'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.AspNetCore'
     inputs:
       command: custom
       projects: '**/Framework.AspNetCore.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Authorization/Framework.Authorization.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Authorization'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Authorization'
     inputs:
       command: custom
       projects: '**/Framework.Authorization.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Config/Framework.Config.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Config'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Config'
     inputs:
       command: custom
       projects: '**/Framework.Config.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Config.Autofac/Framework.Config.Autofac.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Config.Autofac'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Config.Autofac'
     inputs:
       command: custom
       projects: '**/Framework.Config.Autofac.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Consul/Framework.Consul.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Consul'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Consul'
     inputs:
       command: custom
       projects: '**/Framework.Consul.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) /p:GeneratePackageOnBuild=false --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Core/Framework.Core.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Core'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Core'
     inputs:
       command: custom
       projects: '**/Framework.Core.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.DataAccess.EF/Framework.DataAccess.EF.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.DataAccess.EF'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.DataAccess.EF'
     inputs:
       command: custom
       projects: '**/Framework.DataAccess.EF.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.DataAccess.Mongo/Framework.DataAccess.Mongo.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.DataAccess.Mongo'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.DataAccess.Mongo'
     inputs:
       command: custom
       projects: '**/Framework.DataAccess.Mongo.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.DataAccess.NH/Framework.DataAccess.NH.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.DataAccess.NH'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.DataAccess.NH'
     inputs:
       command: custom
       projects: '**/Framework.DataAccess.NH.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Domain/Framework.Domain.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Domain'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Domain'
     inputs:
       command: custom
       projects: '**/Framework.Domain.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.EasyNetQ/Framework.EasyNetQ.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.EasyNetQ'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.EasyNetQ'
     inputs:
       command: custom
       projects: '**/Framework.EasyNetQ.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.FileUpload/Framework.FileUpload.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.FileUpload'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.FileUpload'
     inputs:
       command: custom
       projects: '**/Framework.FileUpload.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Kafka/Framework.Kafka.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Kafka'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Kafka'
     inputs:
       command: custom
       projects: '**/Framework.Kafka.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Logging.SeriLog/Framework.Logging.SeriLog.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Logging.SeriLog'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Logging.SeriLog'
     inputs:
       command: custom
       projects: '**/Framework.Logging.SeriLog.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.MassTransit/Framework.MassTransit.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.MassTransit'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.MassTransit'
     inputs:
       command: 'custom'
       projects: '**/Framework.MassTransit.csproj'
       custom: 'pack'
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Messages/Framework.Messages.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Messages'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Messages'
     inputs:
       command: custom
       projects: '**/Framework.Messages.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Query/Framework.Query.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Query'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Query'
     inputs:
       command: custom
       projects: '**/Framework.Query.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.RabbitMQ/Framework.RabbitMQ.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.RabbitMQ'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.RabbitMQ'
     inputs:
       command: custom
       projects: '**/Framework.RabbitMQ.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Redis/Framework.Redis.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Redis'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Redis'
     inputs:
       command: custom
       projects: '**/Framework.Redis.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Restful/Framework.Restful.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Restful'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Restful'
     inputs:
       command: custom
       projects: '**/Framework.Restful.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Specification/Framework.Specification.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Specification'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Specification'
     inputs:
       command: custom
       projects: '**/Framework.Specification.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Swagger/Framework.Swagger.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Swagger'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Swagger'
     inputs:
       command: custom
       projects: '**/Framework.Swagger.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Testing.Core/Framework.Testing.Core.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Testing.Core'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Testing.Core'
     inputs:
       command: custom
       projects: '**/Framework.Testing.Core.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Utility/Framework.Utility.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Utility'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Utility'
     inputs:
       command: custom
       projects: '**/Framework.Utility.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.EventProcessor/Framework.EventProcessor.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.EventProcessor'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.EventProcessor'
     inputs:
       command: custom
       projects: '**/Framework.EventProcessor.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Authentication/Framework.Authentication.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Authentication'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Authentication'
     inputs:
       command: custom
       projects: '**/Framework.Authentication.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Idempotency/Framework.Idempotency.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Idempotency'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Idempotency'
     inputs:
       command: custom
       projects: '**/Framework.Idempotency.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Idempotency.Mongo/Framework.Idempotency.Mongo.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Idempotency.Mongo'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Idempotency.Mongo'
     inputs:
       command: custom
       projects: '**/Framework.Idempotency.Mongo.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Idempotency.Sql/Framework.Idempotency.Sql.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Idempotency.Sql'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Idempotency.Sql'
     inputs:
       command: custom
       projects: '**/Framework.Idempotency.Sql.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Caching/Framework.Caching.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Caching'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Caching'
     inputs:
       command: custom
       projects: '**/Framework.Caching.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Caching.Extensions.Abstractions/Framework.Caching.Extensions.Abstractions.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Caching.Extensions.Abstractions'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Caching.Extensions.Abstractions'
     inputs:
       command: custom
       projects: '**/Framework.Caching.Extensions.Abstractions.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Caching.Extensions.Configuration/Framework.Caching.Extensions.Configuration.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Caching.Extensions.Configuration'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Caching.Extensions.Configuration'
     inputs:
       command: custom
       projects: '**/Framework.Caching.Extensions.Configuration.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Caching.Extensions.DotnetCore/Framework.Caching.Extensions.DotnetCore.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Caching.Extensions.DotnetCore'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Caching.Extensions.DotnetCore'
     inputs:
       command: custom
       projects: '**/Framework.Caching.Extensions.DotnetCore.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Caching.Extensions.Redis/Framework.Caching.Extensions.Redis.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Caching.Extensions.Redis'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Caching.Extensions.Redis'
     inputs:
       command: custom
       projects: '**/Framework.Caching.Extensions.Redis.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Caching.Extensions.DependencyInjection/Framework.Caching.Extensions.DependencyInjection.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Caching.Extensions.DependencyInjection'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Caching.Extensions.DependencyInjection'
     inputs:
       command: custom
       projects: '**/Framework.Caching.Extensions.DependencyInjection.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.MassTransit.Message/Framework.MassTransit.Message.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.MassTransit.Message'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.MassTransit.Message'
     inputs:
       command: custom
       projects: '**/Framework.MassTransit.Message.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - powershell: |
      [xml]$project = Get-Content -Path ./Code/Src/Framework.Security/Framework.Security.csproj
      $version = $project.Project.PropertyGroup.Version
      echo "version: "
      echo $version
      echo "##vso[task.setvariable variable=version]$version"
 
     displayName: 'Get Version of Framework.Security'
##################################################################################################
   - task: DotNetCoreCLI@2
     displayName: 'Pack Framework.Security'
     inputs:
       command: custom
       projects: '**/Framework.Security.csproj'
       custom: pack
       arguments: '/p:Configuration=Release /p:Version=$(version) /p:PackageVersion=$(version) --output $(Build.ArtifactStagingDirectory)'
##################################################################################################
   - task: PublishBuildArtifacts@1
     displayName: 'Publish Artifact: pack'
     inputs:
       ArtifactName: pack
##################################################################################################
